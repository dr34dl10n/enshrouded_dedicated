#!/bin/bash
##### Grab newest Connection logs since last check, get User STEAM ID, convert to User Name, and send telegram alert
### v0.4 - Added currently connected user list
### v0.3 - Added logged in and failed auth detection
### v0.2 - Added method to get online username thanks to 'https://steamid.io'
### v0.1 - POC
#
# Crontab every minute : 
# */1 * * * * /usr/local/sbin/enshrd_steamuser_check
#
# telegram-alert sample script can be found here :
# https://raw.githubusercontent.com/zephxs/ncat-ipset-honeypot/master/telegram-send

### VARS
_ENSHRD_LOGFILE="/home/enshrouded/enshroudedserver/logs/enshrouded_server.log"
_WKGDIR="/home/enshrouded/enshrd-monitor"
_CONNECTED_USERS="${_WKGDIR}/connected-users"
_LOCKFILE="/tmp/enshrd.lock"
# Disable Telegram-alert 
_TELEGRAM_ALERT="false"

### PRE
[ -d "$_WKGDIR" ] || mkdir -p ${_WKGDIR}
# Block script if already in run
if [ -e "$_LOCKFILE" ]; then
_PID=$(cat ${_LOCKFILE})
ps -p $_PID -o pid= >/dev/null 2>&1
  if [ $? -eq 0 ]; then
    echo "Process is running"
    exit
  fi
fi
echo $$ >$_LOCKFILE
trap 'rm -f "$_LOCKFILE"' EXIT

### FUNCTIONS
# Get new lines from current log file
_GET_LOGDIFF(){
diff ${_WKGDIR}/last_check $_ENSHRD_LOGFILE | grep "^>" >${_WKGDIR}/log_news
}

_EXTERNAL_ID(){
# Identify User who tries to login with online service https://steamid.io
_STEAMSRC=$(grep -B4 ${_STEAMID} ${_WKGDIR}/log_news  | awk -F"'" '/ authenticated by steam/ {print $(NF-1)}')
_STEAMUSER=$(curl -f -s https://steamid.io/lookup/$_STEAMSRC | grep -A1 ' <dt class="key">name</dt>' | awk -F'>|<' '/value/ {print $(NF-2)}')
[ -z "$_STEAMUSER" ] && _STEAMUSER="NotFound"
}

### MAIN
_GET_LOGDIFF
# If New Client login detected, parse new logs
if grep '\[online\] Client' ${_WKGDIR}/log_news | grep -q 'authenticated by steam'; then
  # Get New Player Handler
  _NEWUSERIDS=($(awk '/Remote player added. Player handle/ {print $NF}' ${_WKGDIR}/log_news))
  [ -z "${_NEWUSERIDS[@]}" ] && exit 0 || echo -e "[$(date '+%d/%m/%Y %H:%M')] New ID(s) detected = ${_NEWUSERIDS[@]}" >> ${_WKGDIR}/user-connection.log
  # sleep 5 sec for if the connection just occurs
  sleep 5 && _GET_LOGDIFF
  for _STEAMID in "${_NEWUSERIDS[@]}"; do
    # If Auth fail
    if grep -A15 ${_STEAMID} ${_WKGDIR}/log_news | grep -q "Remove player from session. Not found in online game info." ; then
      _EXTERNAL_ID  
      echo "[$(date '+%d/%m/%Y %H:%M')] Failed connection attempt = $_STEAMUSER" >> ${_WKGDIR}/user-connection.log 
      [ "$_TELEGRAM_ALERT" = true ] && telegram-send -c alarm "DR34DShrouded Server
# FAILED User Auth = $_STEAMUSER"

    # else search username
    else
      counter="0"
      while true; do
        _GET_LOGDIFF
        # Get User Name from logs (Wait until savegame and Character Name has been retrieved
        _STEAMUSER=$(awk '/Send Character Savegame/ {print $NF}' ${_WKGDIR}/log_news)
        counter=$((counter+1))
        [ "$counter" -eq 9 ] && _EXTERNAL_ID && break
        [ -z "$_STEAMUSER" ] && { sleep 3; continue; } || break
      done
      # log to file and send telegram alert
      echo "[$(date '+%d/%m/%Y %H:%M')] User Connected = $_STEAMUSER" >> ${_WKGDIR}/user-connection.log
      [ "$_TELEGRAM_ALERT" = true ] && telegram-send -c alarm "DR34DShrouded Server
# User Connected = $_STEAMUSER"
      grep -q "$_STEAMUSER" $_CONNECTED_USERS || echo "$_STEAMUSER" >>$_CONNECTED_USERS 
    fi
  done
fi

# if not try to find removed player
if grep -q 'Remove Entity for Player' ${_WKGDIR}/log_news; then
  _REMOVEDPLAYER=$(awk '/Remove Entity for Player/ {print $NF}' ${_WKGDIR}/log_news |tr -d "'")
  _REMOVEDID=$(grep '\[session\] Player removed. Player handle:' ${_WKGDIR}/log_news | awk '{print $NF}') 
  echo "[$(date '+%d/%m/%Y %H:%M')] User Logout = $_REMOVEDPLAYER  #id:$_REMOVEDID" >> ${_WKGDIR}/user-connection.log
  [ "$_TELEGRAM_ALERT" = true ] && telegram-send -c alarm "DR34DShrouded Server
# User Logout = $_REMOVEDPLAYER"
  grep -q "$_REMOVEDPLAYER" $_CONNECTED_USERS && sed -i "/$_REMOVEDPLAYER/d" $_CONNECTED_USERS
fi

### POST
# copy current log for next compare and remove found connection events
cp -f "$_ENSHRD_LOGFILE" ${_WKGDIR}/last_check
>${_WKGDIR}/log_news 
rm -f "${_LOCKFILE}"

